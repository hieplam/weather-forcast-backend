// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using weather_forcast_backend;

namespace weather_forcast_backend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210903141025_add_seed_data")]
    partial class add_seed_data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("weather_forcast_backend.Todo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("FeelsLike")
                        .HasColumnType("float");

                    b.Property<int>("Humidity")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pressure")
                        .HasColumnType("int");

                    b.Property<double>("Temp")
                        .HasColumnType("float");

                    b.Property<double>("TempMax")
                        .HasColumnType("float");

                    b.Property<double>("TempMin")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Todos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2021, 9, 3, 21, 10, 24, 873, DateTimeKind.Local).AddTicks(7379),
                            FeelsLike = 5.0,
                            Humidity = 3,
                            Note = "It's a sunny day",
                            Pressure = 2,
                            Temp = 14.5,
                            TempMax = 19.0,
                            TempMin = 4.0
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2021, 9, 3, 21, 10, 24, 875, DateTimeKind.Local).AddTicks(3668),
                            FeelsLike = 10.0,
                            Humidity = 1,
                            Note = "Let's go for a ride",
                            Pressure = 1,
                            Temp = 18.5,
                            TempMax = 23.0,
                            TempMin = 9.0
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2021, 9, 3, 21, 10, 24, 875, DateTimeKind.Local).AddTicks(3688),
                            FeelsLike = 8.0,
                            Humidity = 3,
                            Note = "Another beatiful day :)",
                            Pressure = 2,
                            Temp = 15.199999999999999,
                            TempMax = 22.0,
                            TempMin = 8.0
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
